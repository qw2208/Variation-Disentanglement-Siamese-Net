#-*- coding: utf-8 -*-
import tensorflow as tf
from NeuralHelper import *

class Decoder():
    '''
    The Decoder of the Siamese: Essentially Convolutional Layers to extract feature maps
                                from the input images
        Input: One image
        Output: 1) Feature_v  2) Feature_i
    '''
    def __init__(
            self,
            batch_size=100,
            image_shape=[28,28,1],
            dim_W2=128,
            dim_W1=64,
            dim_channel=1,
            ):
        '''
        The initializer of the decoder:
            Input: Global Parameters
                dim_z: Noise vector dimension
                dim_y: Label vector dimension
                dim_W1, dim_W2, dim_W3: Dimension of the Convolutional Layer weights
        '''
        self.batch_size = batch_size
        self.image_shape = image_shape
        self.dim_z = dim_z
        self.dim_y = dim_y

        self.dim_W1 = dim_W1
        self.dim_W2 = dim_W2
        self.dim_W3 = dim_W3
        self.dim_channel = dim_channel

        self.discrim_W1 = tf.Variable(tf.random_normal([5,5,dim_channel,dim_W1], stddev=0.02), name='discrim_W1')
        self.discrim_W2 = tf.Variable(tf.random_normal([5,5,dim_W1,dim_W2], stddev=0.02), name='discrim_W2')

    def buildDecoder(self):
        image = tf.placeholder(tf.float32, [self.batch_size] + self.image_shape)
        h2 = self.Decoder(image)

        return h2

    def Decoder(self, image):
        '''
        The decoder builder: To build the decoder
            Output: Feature Maps generated by the decoder
        '''
        h1 = lrelu( tf.nn.conv2d(image, self.discrim_W1, strides=[1,2,2,1], padding='SAME'))
        h2 = lrelu( batchnormalize(tf.nn.con2d( h1, self.discrim_W2, strides=[1,2,2,1], padding='SAME')))

        return h2











